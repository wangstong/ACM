#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <cmath>

using namespace std;

int prime[10005];
int vis[10005];

struct node {
    int num, step;
};
queue<node> q;
int first, last;

int is_prime(int n) {
    if (n <= 1)
        return 0;
    int m = floor(sqrt(n) + 0.5);
    for (int i = 2; i <= m; i++) {
        if (n % i == 0)
            return 0;
    }
    return 1;
}

void bfs() {
    while (!q.empty()) {
        node p1 = q.front();
        q.pop();

        int num = p1.num;
        int step = p1.step;
        if (num == last) {
            printf("%d\n", step);
            return;
        }

        for (int i = 0; i <= 9; i++) { // ¸öÎ»
            int num1 = num/10*10 + i;
            if (prime[num1] && !vis[num1]) {
                vis[num1] = 1;
                node p2 = {num1, step+1};
                q.push(p2);
            }
        }
        for (int i = 0; i <= 9; i++) {
            int num1 = num/100*100 + num%10 + i*10;
            if (prime[num1] && !vis[num1]) {
                vis[num1] = 1;
                node p2 = {num1, step+1};
                q.push(p2);
            }
        }
        for (int i = 0; i <= 9; i++) {
            int num1 = num/1000*1000 + num%100 + i*100;
            if (prime[num1] && !vis[num1]) {
                vis[num1] = 1;
                node p2 = {num1, step+1};
                q.push(p2);
            }
        }
        for (int i = 1; i <= 9; i++) {
            int num1 = num%1000 + i*1000;
            if (prime[num1] && !vis[num1]) {
                vis[num1] = 1;
                node p2 = {num1, step+1};
                q.push(p2);
            }
        }
    }
    printf("Impossible\n");
}

int main() {
    for (int i = 1000; i <= 9999; i++) {
        if (is_prime(i))
            prime[i] = 1;
    }

    int T;
    cin >> T;
    while (T--) {
        memset(vis, 0, sizeof(vis));
        while (!q.empty()) {
            q.pop();
        }
        cin >> first >> last;

        node p = {first,0};
        vis[first] = 1;
        q.push(p);
        bfs();
    }
    return 0;
}
