#include <stdio.h>

const int mod = 123456789;
typedef long long LL;

struct Matrix
{
    LL a[6][6];
};

Matrix unit_matrix =
{
    1, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0,
    0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1
}; //单位矩阵

Matrix mul(Matrix a, Matrix b) //矩阵相乘
{
    Matrix res;
    for(int i = 0; i < 6; i++)
        for(int j = 0; j < 6; j++)
        {
            res.a[i][j] = 0;
            for(int k = 0; k < 6; k++)
            {
                res.a[i][j] += a.a[i][k] * b.a[k][j];
                res.a[i][j] %= mod;
            }
        }
    return res;
}


Matrix pow_matrix(Matrix a, LL n)  //矩阵快速幂
{
    Matrix res = unit_matrix;
    while(n != 0)
    {
        if(n & 1)
            res = mul(res, a);
        a = mul(a, a);
        n >>= 1;
    }
    return res;
}


int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        LL n;
        scanf("%lld", &n);

        Matrix A;
        A.a[0][0] = 1, A.a[0][1] = 2, A.a[0][2] = 1, A.a[0][3] = 0, A.a[0][4] = 0, A.a[0][5] = 0;
        A.a[1][0] = 1, A.a[1][1] = 0, A.a[1][2] = 0, A.a[1][3] = 0, A.a[1][4] = 0, A.a[1][5] = 0;
        A.a[2][0] = 0, A.a[2][1] = 0, A.a[2][2] = 1, A.a[2][3] = 3, A.a[2][4] = 3, A.a[2][5] = 1;
        A.a[3][0] = 0, A.a[3][1] = 0, A.a[3][2] = 0, A.a[3][3] = 1, A.a[3][4] = 2, A.a[3][5] = 1;
        A.a[4][0] = 0, A.a[4][1] = 0, A.a[4][2] = 0, A.a[4][3] = 0, A.a[4][4] = 1, A.a[4][5] = 1;
        A.a[5][0] = 0, A.a[5][1] = 0, A.a[5][2] = 0, A.a[5][3] = 0, A.a[5][4] = 0, A.a[5][5] = 1;
        Matrix B = {0};
        B.a[0][0] = 2;
        B.a[1][0] = 1;
        B.a[2][0] = 27;
        B.a[3][0] = 9;
        B.a[4][0] = 3;
        B.a[5][0] = 1;

        A = pow_matrix(A, n-2);
        B = mul(A, B);
        printf("%LLd\n", B.a[0][0]);
    }
    return 0;
}